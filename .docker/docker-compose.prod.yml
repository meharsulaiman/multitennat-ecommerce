# ==========================================
# Docker Compose - Production Environment
# ==========================================
# This configuration is optimized for production
# with security hardening, resource limits, and monitoring
# ==========================================

services:
  # ==========================================
  # MongoDB Database Service (Production)
  # ==========================================
  mongodb:
    image: mongo:latest
    container_name: multitennat-ecommerce-mongodb-prod
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE:-multitennat_ecommerce}
    volumes:
      # Persistent data storage
      - mongodb_data_prod:/data/db
      - mongodb_config_prod:/data/configdb
      # Backup directory (mounted from host)
      - ../backups/mongodb:/backups:rw
    networks:
      - app-network-prod
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Security: Run without exposing port to host
    # Only accessible via docker network
    # Uncomment below to expose for direct access (not recommended)
    # ports:
    #   - "27017:27017"

  # ==========================================
  # Next.js Application Service (Production)
  # ==========================================
  app:
    build:
      context: ..
      dockerfile: .docker/Dockerfile
      target: runner
      args:
        - NODE_ENV=production
        - DATABASE_URI=${DATABASE_URI}
        - PAYLOAD_SECRET=${PAYLOAD_SECRET}
        - NEXT_PUBLIC_SERVER_URL=${NEXT_PUBLIC_SERVER_URL}
    container_name: multitennat-ecommerce-app-prod
    restart: always
    ports:
      - '3000:3000'
    environment:
      # Node environment
      NODE_ENV: production

      # Database configuration
      DATABASE_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:27017/${MONGO_INITDB_DATABASE:-multitennat_ecommerce}?authSource=admin

      # Payload CMS configuration
      PAYLOAD_SECRET: ${PAYLOAD_SECRET}
      NEXT_PUBLIC_SERVER_URL: ${NEXT_PUBLIC_SERVER_URL}

      # Production optimizations
      PORT: 3000
      HOSTNAME: '0.0.0.0'
    networks:
      - app-network-prod
    depends_on:
      mongodb:
        condition: service_healthy
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 512M
      # Uncomment for Docker Swarm deployments
      # replicas: 2
      # update_config:
      #   parallelism: 1
      #   delay: 10s
      # restart_policy:
      #   condition: on-failure
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:3000/api/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ==========================================
  # Nginx Reverse Proxy (Optional but Recommended)
  # ==========================================
  nginx:
    image: nginx:alpine
    container_name: multitennat-ecommerce-nginx-prod
    restart: always
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - app-network-prod
    depends_on:
      - app
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 3

# ==========================================
# Networks (Production)
# ==========================================
networks:
  app-network-prod:
    driver: bridge
    name: multitennat-ecommerce-network-prod

# ==========================================
# Volumes for Data Persistence (Production)
# ==========================================
volumes:
  mongodb_data_prod:
    driver: local
    name: multitennat-ecommerce-mongodb-data-prod
  mongodb_config_prod:
    driver: local
    name: multitennat-ecommerce-mongodb-config-prod
